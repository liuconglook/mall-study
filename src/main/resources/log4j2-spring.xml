<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration monitorInterval="5">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <!-- 定义变量 -->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%highlight{%date{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %-36logger{1.} - %m%n}{FATAL=red, ERROR=red, WARN=yellow, INFO=green}" />
        <!-- 定义日志存储的路径 -->
        <property name="FILE_PATH" value="E://mallLogs" />
        <property name="FILE_NAME" value="mall" />
    </Properties>

    <!-- 输出源 -->
    <Appenders>
        <!-- 控制台日志输出 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </Console>

        <!-- SMTP：邮件发送日志-->
        <!-- subject:邮箱标题；to:收件人列表逗号隔开；from:发件人；smtpUsername:smtp账号；smtpPassword:smtp密码 -->
        <!-- smtpHost:主机ip；smtpPort:端口；smtpProtocol:协议默认smtp -->
        <!-- smtpDebug:是否调试；bufferSize:默认512(最大日志事件数) -->
        <SMTP name="Mail" subject="MALL系统异常信息" to="liuconglook@gmail.com,lceclipse@outlook.com" from="liuconglook@qq.com"
              smtpUsername="liuconglook@qq.com" smtpPassword="dbzqczhrtxajhgfe" smtpHost="smtp.qq.com"
              smtpDebug="false" smtpPort="587" bufferSize="512" smtpProtocol="smtp">
            <!-- 默认HTMLayout -->
            <!--<PatternLayout pattern="${LOG_PATTERN}" />-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
        </SMTP>
        <!-- 定义异步发通知邮件AsyncAppender属性-->
        <Async name="AsyncMail">
            <appender-ref ref="Mail"/>
        </Async>

        <!-- 保存日志到文件，每次运行append追加或不追加，一般测试用 -->
        <File name="FileLog" fileName="${FILE_PATH}/test.log" append="false">
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </File>

        <!-- INFO LOG -->
        <!-- name:名称，fileName：日志文件名，filePattern：日志压缩文件名，%i：文件序号 -->
        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log" filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
            <!-- 接受（ACCEPT）level及以上级别的信息（onMatch），拒绝（DENY）其他级别信息（onMismatch），NEUTRAL中立-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 日志格式 -->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!-- 滚存策略：每过1小时 或 日志达到 10MB 则压缩一次-->
            <Policies>
                <!-- 基于时间：interval默认是1 hour -->
                <TimeBasedTriggeringPolicy interval="24"/>
                <!-- 基于文件大小：size文件大小KB/MB/GB -->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- 默认的滚存策略：max默认7，与%i相呼应，当计数到15时，旧文件会被删除-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <!-- WARN LOG -->
        <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn.log" filePattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="24"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <!-- ERROR LOG -->
        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log" filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="24"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

    </Appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <Logger name="org.mybatis" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>
        <!--监控系统信息-->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>

        <Root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="FileLog"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
<!--            <appender-ref ref="AsyncMail"/>-->
        </Root>
    </Loggers>

</configuration>
